.\" Copyright (C) 2016 GPL v3.0 Michael R. Tirado <mtirado418@gmail.com>
.\"
.\"

.TH JETTISON 1


.\" NAME
.SH NAME

jettison \- launch program into a predefined chroot environment with a new
mount namespace, pid namespace, and optional net namespace.


.\" SYNOPSIS
.SH SYNOPSIS

.BI jettison
.RI [ program_path ] \  [ pod_config ] \  [ options ] \ [program_arguments... ]
.P
.I program_path
is the full path to program,
.I pod_config
file defines the new environment, and
.I options
are described below.
.I program_arguments
start at the first unrecognized option and are passed to program on execve.

.B e.g:
.RS
jettison /bin/bash ~/podconfigs/bash1.pod
.P
jettison /bin/bash ~/podconfigs/bash2.pod --lognet 0 0 --strict
.P
jettison /bin/echo ~/podconfigs/echo.pod 'argument 1'
.RE


.\" OPTIONS
.SH OPTIONS

--procname, -p
.RI [ process_name ]
.RS
Set name of process at argv[0] before calling execve.
.RE
.P

--strict
.RS
Seccomp rejection kills process.
.RE
.P

--tracecalls
.RS
Count each system call made and generate an optimized seccomp whitelist.
.RE
.P

--lognet
.RI [ size ]\ [ count ]
.RS
Generate logs of
.B newnet
ip/macvlan traffic using seperately sandboxed tcpdump
program. Both arguments must be supplied. Log files are stored in a uniquely
named directory at current working directory.
.I size
is unrestricted if 0, otherwise this is file_size limit passed to tcpdump (in
millions of bytes, not megabytes). If
.I count
is 0 the log file is indefinitely incremented when it reaches
.I size
bytes. If
.I count
is 2 or greater tcpdump will rotate between that many log files.
.RE
.P

--logoutput
.RS
Write stdout and stderr to time stamped log file at current working directory.
.RE
.P

--daemon
.RS
Disconnects controlling terminal and orphans process.
.RE
.P

--block-new-filters
.RS
Seccomp optimization.
.RE
.P

--blacklist
.RS
Replace seccomp rules with the system-wide blacklist.
.RE
.P

--allow-ptrace
.RS
Usually ptrace is disabled unless this option is specified, or using
--blacklist and __NR_ptrace is missing from blacklist file.
.RE
.P

--stacksize
.RI [ size ]
.RS
Set new cloned threads stack
.I size
in kilobytes.
.RE


.\" DESCRIPTION
.SH DESCRIPTION

Launches program into a chroot environment. Typically located somewhere like
/opt/pods/user/config.pod/ using current username and pod filename, this
new root contains the files and directories specified in pod config. A pod's
/podhome can be accessed by owner for copying files in and out. Pods are
otherwise root owned and can usually be destroyed using
.BR jettison_destruct (1).

.B Seccomp:
Seccomp filter is specified in the pod config file unless --blacklist is used,
in which case the pod seccomp options are completely replaced by
.IR /etc/jettison/blacklist .

.B Capabilities:
File capabilities can be permitted with the trade-off of NO_NEW_PRIVS not being
set, and the capabilities requested will be left in bounding set. This feature
can be disabled, see the customization section.


.\" POD CONFIG FILE
.SH POD CONFIG OPTIONS

.\" file
.B file
.RI [ mount_flags ]\ [ full_path ]
.RS
Provide access to file at
.IR full_path .
.I mount_flags
.RB { r | w | x | d | s }
can be thought of as a new set of access controls in addition to standard DAC:
.RB ( r )ead,\ ( w )rite,\ e( x )ecute,\ ( d )evice,\ ( s )uid.
.RE

.\" home
.P
.B home
.RI [ mount_flags ]\ [ home_path ]
.RS
Like the
.B file
option, but works relative to home directory instead
of system root. e.g: 'home r /.bashrc'.
.RE

.\" seccomp
.P
.B seccomp_allow
.RI [ syscall_define ]
.RS
Add systemcall to seccomp whitelist. If nothing is added to list
every system call is allowed, except ptrace.
.I syscall_define
is the system call definition as it appears in linux header file, e.g:
__NR_read, __NR_write, etc.
.RE
.P
.BR seccomp_block
.RI [ syscall_define ]
.RS
Failed seccomp check returns with errno, useful to prevent --strict killings.
.RE

.\" capability
.P
.BR capability
.RI [ cap_define ]
.RS
Allow process to elevate privilege through files with
.RB ( s )uid
.I mount_flag
set, if that capability is not internally blacklisted by jettison.
.I cap_define
is the capability as defined in linux/capability.h, e.g:
CAP_NET_RAW, CAP_NET_BIND_SERVICE, etc.
.RE

.\" newnet
.P
.B newnet
.RI [ net_type ]
.RS
.TP
.I none
Create a blank new net namespace.
.TP
.I loop
New net namespace with loopback set up.
.TP
.IR ipvlan \ [ device ] \  [ ipaddr ]
Create ipvlan interface with same gateway and mac address as
.IR device ,
and new static
.IR ipaddr .
.TP
.IR macvlan \ [ device ] \  [ macaddr ] \  [ ipaddr ]
Create macvlan interface with same gateway as
.IR device ,
a new
.IR macaddr ,
and new static
.IR ipaddr .
You can specify
**:**:**:**:**:** to use default mac assigned by the kernel.
.RE

.\" newpts
.P
.B newpts
.RS
Mount a new pts instance in pod.
.RE

.\" noproc
.P
.B noproc
.RS
Do not mount /proc filesystem.
.RE

.\" home_exec
.P
.B home_exec
.RS
Remount /podhome directory with execute flag.
.RE

.\" X11
.P
.B X11
.RS
This does not sandbox X11 in any profound way other than it's intended purpose
of filtering auth data/socket so pod can only access the $DISPLAY it was
launched under. This works assuming system only provides X11 socket through
/tmp. So something like `startx -- -nolisten local -nolisten tcp` would be the
best way to protect a pod's X11 session.
.RE


.\" FILES
.SH FILES

.B Pod Roots --
.I /opt/pods/<username>
.P
.B User Permissions  --
.I /etc/jettison/users/<username>
.P
.B System-wide Blacklist  --
.I /etc/jettison/blacklist


.\" PERMISSIONS
.SH USER PERMISSIONS FILE

.B newpts
- allow user to create newpts instances.
.P
.B netdev
.RI [ interface ]
- underlying device used for ipvlan and macvlan.
.P
.B iplimit
.RI [ count ]
- maximum number of ip addresses this user may occupy.
.P
.B macaddr
.RI [ address ]
- user can occupy this mac address.
.P
.B ipaddr
.RI [ address ]
- user can occupy this ip address.


.\" EXAMPLES
.SH EXAMPLE FILES
.RS 8
.SH --------------------------------------------------------------------------
.B Pod Config
.RS 8
newnet macvlan eth0 **:**:**:**:**:** 192.168.0.21/24

file  r   /usr

file  rx  /lib

file  rx  /bin

file  rwd /dev/null

home  r   /.bashrc

seccomp_allow __NR_read

seccomp_allow __NR_write
.RE
.P
.SH --------------------------------------------------------------------------
.B User Permissions
.RS 8
netdev eth0

iplimit 1

macaddr **:**:**:**:**:**

ipaddr 192.168.0.21/24
.RE
.P
.SH --------------------------------------------------------------------------
.B Blacklist
.RS 8
__NR_ptrace

__NR_reboot

etc, etc, etc...
.RE
.RE


.\" NOTES
.SH NOTES

The users pod directory is not tracked, and is generated using the config
file name. Best practice is to always use unique pod config names.
.P
Some directories are either blacklisted, or can only be mounted as MS_RDONLY.
These can be expanded by adding entries to the arrays near the top of src/pod.c
.P
jettison uses an init program and sets seccomp filter before exec, so the
following system calls are effectively unblockable: sigaction, sigreturn,
clone, waitpid, kill, nanosleep, exit, exit_group, execve.


.\" BUGS
.SH BUGS

If using --daemon with --logoutput, LD_PRELOAD is used to set stdio to line
buffered mode since it is piped and not a regular log file. If the daemon
uses file capabilites this will not be allowed for security reasons, so you
may have to patch these daemons yourself to write in line buffered mode or
there will be log data loss.


.\" CUSTOMIZATION
.SH CUSTOMIZATION

There are a bunch of defines for changing paths and various other parameters
see src/defines.h and makefile for more details.


.\" SEE ALSO
.SH SEE ALSO

.BR jettison_destruct (1).
.BR iptables (8).
.BR tcpdump (1).
.BR capabilities (7).
.BR setcap (8).
.BR prctl (2).


.\" HISTORY
.SH HISTORY

Spun off a minimal service-manager for low powered dev boards in early 2015.


.\" AUTHOR
.SH AUTHOR

Michael R. Tirado <mtirado418@gmail.com>


